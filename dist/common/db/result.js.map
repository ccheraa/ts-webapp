{"version":3,"file":"result.js","sourceRoot":"","sources":["../../../src/common/db/result.ts"],"names":[],"mappings":";AAMC,CAAC;AAKD,CAAC;AACF,6DAA6D;AAC7D,8BAA8B;AAC9B,IAAI;AACJ,qEAAqE;AACrE,iCAAiC;AACjC,IAAI;AACJ,2DAA2D;AAC3D,oCAAoC;AACpC,yCAAyC;AACzC,IAAI;AACJ,qEAAqE;AACrE,2CAA2C;AAC3C,IAAI;AAEJ,gDAAgD;AAChD,kBAAkB;AAClB,KAAK;AACL,gDAAgD;AAChD,aAAa;AACb,KAAK;AACL,kDAAkD;AAClD,mBAAmB;AACnB,eAAe;AACf,KAAK;AAEL,8BAA8B;AAC9B,sFAAsF;AACtF,mGAAmG;AACnG,uGAAuG;AACvG,uHAAuH;AACvH,oCAAoC;AACpC,qCAAqC;AACrC,iBAAiB;AACjB,qBAAqB;AACrB,6CAA6C;AAC7C,kBAAkB;AAClB,aAAa;AACb,iBAAiB;AACjB,MAAM;AACN,8BAA8B;AAC9B,MAAM","sourcesContent":["import { Response } from 'express';\r\n// import { Response } from 'express';\r\n\r\nexport interface Multi<T> {\r\n  total: number;\r\n  rows: T[];\r\n};\r\nexport interface ResponseType {\r\n  ok: boolean;\r\n  data?: any;\r\n  errors?: any;\r\n};\r\n// export function encodeResponse(data?: any): ResponseType {\r\n//   return { ok: true, data};\r\n// }\r\n// export function encodeErrorResponse(errors: any[]): ResponseType {\r\n//   return { ok: false, errors};\r\n// }\r\n// export function sendResponse(res: Response, data: any) {\r\n//   res.json(encodeResponse(data));\r\n//   console.log('response sent!', data);\r\n// }\r\n// export function sendErrorResponse(res: Response, errors?: any[]) {\r\n//   res.json(encodeErrorResponse(errors));\r\n// }\r\n\r\n// export type NumberResultType = ResultType & {\r\n//   data: number;\r\n// };\r\n// export type OneResultType<T> = ResultType & {\r\n//   data: T;\r\n// };\r\n// export type MultiResultType<T> = ResultType & {\r\n//   count: number;\r\n//   data: T[];\r\n// };\r\n\r\n// /* ok & count: not finished\r\n// export function Result<T>(data: T): { ok: boolean, data: T | T[], count?: number };\r\n// export function Result<T>(data: T, ok: boolean): { ok: boolean, data: T | T[], count?: number };\r\n// export function Result<T>(data: T[], count: number): { ok: boolean, data: T | T[], count?: number };\r\n// export function Result<T>(data: T | T[], other?: number | boolean): { ok: boolean, data: T | T[], count?: number } {\r\n//   let ok: boolean, count: number;\r\n//   if (typeof other === 'number') {\r\n//     ok = true;\r\n//     count = other;\r\n//   } else if (typeof other === 'boolean') {\r\n//     ok = other;\r\n//   } else {\r\n//     ok = true;\r\n//   }\r\n//   return {ok, data, count};\r\n// }*/"]}