{"version":3,"file":"loader.service.js","sourceRoot":"","sources":["../../../src/client/service/loader.service.ts"],"names":[],"mappings":";;;;;;;AAAA,sCAA2C;AAC3C,8BAA8C;AAK9C,IAAa,aAAa;IAD1B;QAEU,YAAO,GAAsC,EAAE,CAAC;QACjD,WAAM,GAAqB,IAAI,YAAO,EAAW,CAAC;IA0B3D,CAAC;IAzBC,4BAAI,GAAJ,UAAK,MAAc,EAAE,EAAa;QAChC,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC;QAC1C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,KAAK,MAAM,EAAzB,CAAyB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;gBAChB,MAAM,QAAA;gBACN,EAAE,EAAE,EAAE;aACP,CAAC,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;IACD,8BAAM,GAAN,UAAO,MAAc;QACnB,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC;QAC5C,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,UAAA,OAAO,IAAI,OAAA,OAAO,CAAC,MAAM,KAAK,MAAM,EAAzB,CAAyB,CAAC,CAAC;QACzE,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;YAC3B,CAAC;YACD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAChC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;IACD,6BAAK,GAAL;QACE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC1C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IACH,oBAAC;AAAD,CAAC,AA5BD,IA4BC;AA5BY,aAAa;IADzB,iBAAU,EAAE;GACA,aAAa,CA4BzB;AA5BY,sCAAa","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs/rx';\r\n\r\nimport { Loader } from '../db';\r\n\r\n@Injectable()\r\nexport class LoaderService implements Loader {\r\n  private loading: { action: string, cb: Function}[] = [];\r\n  public result: Subject<boolean> = new Subject<boolean>();\r\n  load(action: string, cb?: Function): Observable<boolean> {\r\n    console.log('loading: ' + action + '...');\r\n    if (this.loading.findIndex(loading => loading.action === action) < 0) {\r\n      this.loading.push({\r\n        action,\r\n        cb: cb\r\n      });\r\n    }\r\n    return this.check();\r\n  }\r\n  unload(action: string): Observable<boolean> {\r\n    console.log('unloading: ' + action + '...');\r\n    let found = this.loading.findIndex(loading => loading.action === action);\r\n    if (found > -1) {\r\n      if (this.loading[found].cb) {\r\n        this.loading[found].cb();\r\n      }\r\n      this.loading.splice(found, 1);\r\n    }\r\n    return this.check();\r\n  }\r\n  check(): Observable<boolean>  {\r\n    this.result.next(this.loading.length > 0);\r\n    return this.result;\r\n  }\r\n}\r\n"]}